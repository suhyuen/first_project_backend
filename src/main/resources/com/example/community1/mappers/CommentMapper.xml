<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.community1.mappers.CommentMapper">
    <resultMap id="commentResultMap" type="com.example.community1.models.Comment">
        <result property="uid" column="uid"/>
        <result property="userUid" column="user_uid"/>
        <result property="postUid" column="post_uid"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="deleteyn" column="deleteyn"/>

        <collection property="post" javaType="com.example.community1.models.Post">
            <result property="uid" column="postUid"/>
        </collection>

        <collection property="user" javaType="com.example.community1.models.User">
            <result property="uid" column="userUid"/>
            <result property="nickname" column="nickname"/>
        </collection>

    </resultMap>

    <insert id="insertComment">
        insert into comments_tb(user_uid, post_uid, content)
        value(#{userUid}, #{postUid}, #{content})
    </insert>

    <select id="selectComment" resultMap="commentResultMap">
        SELECT
        ct.content,
        ct.post_uid,
        ct.created_at,
        ut.nickname,
        COUNT(DISTINCT commentlikes_tb.uid) AS likeCount
        FROM
        comments_tb AS ct
        INNER JOIN
        user_tb AS ut ON ut.uid = ct.user_uid
        LEFT JOIN
        commentlikes_tb ON ct.uid = commentlikes_tb.comment_uid
        WHERE
        ct.post_uid = #{postUid} AND
        ct.deleteyn = 'N'
        GROUP BY
        ct.content,
        ct.post_uid,
        ct.created_at,
        ut.nickname
        ORDER BY
        ct.created_at DESC;
    </select>

    <update id = "updateComment">
        update commenets_tb set content = #{content} where uid = #{uid}
    </update>
</mapper>