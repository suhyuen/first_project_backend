<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.community1.mappers.PostMapper">

    <resultMap id="postResultMap" type="com.example.community1.models.Post">
        <result property="uid" column="uid"/>
        <result property="createdAt" column="createdAt"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="likeCount" column="likeCount"/>
        <result property="viewer" column="viewer"/>
        <result property="categoryName" column="categoryName"/>

        <collection property="user" ofType="com.example.community1.models.User">
            <result property="uid" column="userUid"/>
            <result property="nickname" column="nickname"/>
        </collection>

    </resultMap>
    <insert id="insertPost">
        INSERT INTO post_tb(user_uid, title, content, categories_uid)
        VALUE( #{userUid}, #{title},#{content}, #{categoriesUid})
    </insert>

    <select id="selectAllPosts" resultMap="postResultMap">
        SELECT
        post_tb.uid AS uid,
        post_tb.title AS title,
        post_tb.created_at AS createdAt,
        post_tb.viewer AS viewer,
        post_tb.deleteyn AS deleteyn,
        user_tb.nickname AS nickname,
        COUNT(DISTINCT postlikes_tb.uid) AS likeCount
        FROM post_tb
        INNER JOIN user_tb ON post_tb.user_uid = user_tb.uid
        LEFT JOIN postlikes_tb ON post_tb.uid = postlikes_tb.post_uid
        WHERE post_tb.deleteyn = 'n'
        GROUP BY
        post_tb.uid,
        post_tb.title,
        post_tb.created_at,
        post_tb.viewer,
        post_tb.deleteyn,
        user_tb.nickname
        ORDER BY post_tb.created_at DESC;
    </select>

    <select id="selectPosts" resultMap="postResultMap">
        SELECT
        post_tb.uid AS uid,
        post_tb.title AS title,
        post_tb.created_at AS createdAt,
        post_tb.viewer AS viewer,
        post_tb.deleteyn AS deleteyn,
        user_tb.nickname AS nickname,
        COUNT(DISTINCT postlikes_tb.uid) AS likeCount
        FROM post_tb
        INNER JOIN user_tb ON post_tb.user_uid = user_tb.uid
        LEFT JOIN postlikes_tb ON post_tb.uid = postlikes_tb.post_uid
        WHERE post_tb.deleteyn = 'n'
        AND categories_uid=#{categoryUid}
        GROUP BY
        post_tb.uid,
        post_tb.title,
        post_tb.created_at,
        post_tb.viewer,
        post_tb.deleteyn,
        user_tb.nickname
        ORDER BY post_tb.created_at DESC;
    </select>
    <select id ="myPosts" resultMap="postResultMap">
        SELECT
        post_tb.uid AS uid,
        post_tb.title AS title,
        post_tb.created_at AS createdAt,
        post_tb.viewer AS viewer,
        post_tb.deleteyn AS deleteyn,
        user_tb.nickname AS nickname,
        COUNT(DISTINCT postlikes_tb.uid) AS likeCount
        FROM
        post_tb
        INNER JOIN
        user_tb ON post_tb.user_uid = user_tb.uid
        LEFT JOIN
        postlikes_tb ON post_tb.uid = postlikes_tb.post_uid
        WHERE
        post_tb.user_uid = #{userUid} AND post_tb.deleteyn = 'n'
        GROUP BY
        post_tb.uid,
        post_tb.title,
        post_tb.created_at,
        post_tb.viewer,
        user_tb.nickname
        ORDER BY
        post_tb.created_at DESC;
    </select>

    <select id="detailMypost" resultMap="postResultMap">
        SELECT
        post_tb.uid AS uid,
        post_tb.title AS title,
        post_tb.content AS content,
        post_tb.created_at AS createdAt,
        user_tb.nickname AS nickname,
        user_tb.uid AS userUid,
        categories_tb.categories_name AS categoryName,
        COUNT(DISTINCT postlikes_tb.uid) AS likeCount
        FROM post_tb
        INNER JOIN user_tb ON post_tb.user_uid = user_tb.uid
        INNER JOIN categories_tb ON post_tb.categories_uid = categories_tb.uid
        LEFT JOIN postlikes_tb ON post_tb.uid = postlikes_tb.post_uid
        WHERE post_tb.uid=#{uid};
    </select>
    <update id="updatePost">
        UPDATE post_tb SET title = #{title}, content = #{content}
        WHERE post_tb.uid=#{uid} and user_uid = #{userUid}
    </update>

    <update id="deletePost">
        update post_tb
        set deleteyn ='y'
        where uid=#{uid} and user_uid = #{userUid}

    </update>



</mapper>